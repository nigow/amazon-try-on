import { GoogleGenAI, Modality } from "@google/genai";
import type { GenerateContentResponse } from "@google/genai";

const PROMPT = `You are an expert at photo editing. Your task is to take the person from the user's portrait (first image) and have them wear the clothing item from the product photo (second image). It is crucial that you DO NOT change the person's face, body shape, pose, or the background of their original photo. Only replace their current clothing with the new item, making it look natural and realistic as if they were actually wearing it.`;

function base64ToPart(base64: string) {
  const [header, data] = base64.split(',');
  const mimeType = header.match(/:(.*?);/)?.[1];
  if (!mimeType || !data) {
    throw new Error('Invalid base64 string for image part');
  }
  return {
    inlineData: {
      data,
      mimeType,
    },
  };
}

// FIX: Removed apiKey parameter. API key will be read from environment variables.
export async function generateTryOnImage(
  portraitBase64: string,
  clothingBase64: string
): Promise<string> {
  try {
    // FIX: Initialize GoogleGenAI with API key from environment variables as per guidelines.
    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

    const portraitPart = base64ToPart(portraitBase64);
    const clothingPart = base64ToPart(clothingBase64);

    const response: GenerateContentResponse = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: {
        parts: [
          portraitPart,
          clothingPart,
          { text: PROMPT },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated by the model.");
  } catch (error) {
    console.error("Error generating image with Gemini:", error);
    throw new Error("Failed to generate AI image. Check console for details.");
  }
}
